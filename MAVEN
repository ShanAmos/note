springboot:
mybatis-generator-maven-plugin插件：用于自动生成mapper和pojo
1. pom.xml中添加插件依赖
<plugin>
                    <groupId>org.mybatis.generator</groupId>
                    <artifactId>mybatis-generator-maven-plugin</artifactId>
                    <version>1.3.2</version>
                    <dependencies>
                        <dependency>
                            <groupId>mysql</groupId>
                            <artifactId>mysql-connector-java</artifactId>
                            <version>5.1.35</version>
                        </dependency>
                    </dependencies>
                    <configuration>
                         <!--配置文件的路径-->
                         <configurationFile>${basedir}/src/main/resources/generatorConfig.xml</configurationFile> 
                        <overwrite>true</overwrite>
                    </configuration>
                </plugin>

2. 添加jar依赖
<dependency>
		    <groupId>org.mybatis.generator</groupId>
		    <artifactId>mybatis-generator-core</artifactId>
		    <version>1.3.5</version>
		</dependency>
		<!-- 分页 -->
			<dependency>
			    <groupId>com.github.pagehelper</groupId>
			    <artifactId>pagehelper-spring-boot-starter</artifactId>
			    <version>1.1.1</version>
			</dependency>
3. 新建generatorConfig.xml，配置需要生成的文件位置
4. 执行命令 mvn mybatis-generator:generate自动生成文件

springboot热部署：spring-boot-devtools，其深层原理是使用了两个ClassLoader，一个Classloader加载那些不会改变的类（第三方Jar包），
另一个ClassLoader加载会更改的类，称为  restart ClassLoader,这样在有代码更改的时候，原来的restart ClassLoader 被丢弃，
重新创建一个restart ClassLoader，由于需要加载的类相比较少，所以实现了较快的重启时间（5秒以内）
1. pom.xml中添加依赖
<!--支持热启动jar包-->
<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-devtools</artifactId>
      <version>${spring-boot.version}</version>
      <optional>true</optional>
      <!-- optional=true,依赖不会传递，该项目依赖devtools；之后依赖该项目的项目如果想要使用devtools，需要重新引入 -->
</dependency>
<plugin>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-maven-plugin</artifactId>
      <configuration>
          <fork>true</fork>
       </configuration>
       <dependencies>
       <!-- spring热部署-->
       <!-- https://mvnrepository.com/artifact/org.springframework/springloaded -->
           <dependency>
              <groupId>org.springframework</groupId>
              <artifactId>springloaded</artifactId>
              <version>1.2.6.RELEASE</version>
          </dependency>
       </dependencies>
</plugin>

2. applitaion.yaml中配置
spring:
    devtools:
        restart:
            #热部署生效
          enabled: true
            #设置重启的目录
            #additional-paths: src/main/java
            #classpath目录下的WEB-INF文件夹内容修改不重启
          exclude: WEB-INF/**

springboot使用自定义的properties
1. 在application.properties配置：
com.neo.title=纯洁的微笑
com.neo.description=分享生活和技术

2. 自定义配置类：
@Component
public class NeoProperties {
    @Value("${com.neo.title}")
    private String title;
    @Value("${com.neo.description}")
    private String description;

    //省略getter settet方法

    }
    
 WebJars:我们在开发Java web项目的时候会使用像Maven，Gradle等构建工具以实现对jar包版本依赖管理，以及项目的自动化管理，
 但是对于JavaScript，Css等前端资源包，我们只能采用拷贝到webapp下的方式，这样做就无法对这些资源进行依赖管理。
 那么WebJars就提供给我们这些前端资源的jar包形势，我们就可以进行依赖管理
 1. 加入依赖，如vue.js
 <dependency>
    <groupId>org.webjars.bower</groupId>
    <artifactId>vue</artifactId>
    <version>1.0.21</version>
</dependency>

2. 页面引入：
<link th:href="@{/webjars/bootstrap/3.3.6/dist/css/bootstrap.css}" rel="stylesheet"></link>
