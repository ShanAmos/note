1. swagger:
注解说明
@Api：用在类上，说明该类的作用
@ApiOperation：用在方法上，说明方法的作用
@ApiImplicitParams：用在方法上包含一组参数说明
@ApiImplicitParam：用在@ApiImplicitParams注解中，指定一个请求参数的各个方面
paramType：参数放在哪个地方
header-->请求参数的获取：@RequestHeader
query-->请求参数的获取：@RequestParam
path（用于restful接口）-->请求参数的获取：@PathVariable
body（不常用）
form（不常用）
name：参数名
dataType：参数类型
required：参数是否必须传
value：参数的意思
defaultValue：参数的默认值
@ApiResponses：用于表示一组响应
@ApiResponse：用在@ApiResponses中，一般用于表达一个错误的响应信息
code：数字，例如400
message：信息，例如"请求参数没填好"
response：抛出异常的类
@ApiModel：描述一个Model的信息（这种一般用在post创建的时候，使用@RequestBody这样的场景，请求参数无法使用@ApiImplicitParam注解进行描述的时候）
@ApiModelProperty：描述一个model的属性





sudo mkdir redis
ls -l
chmod -R  777  /usr/mypackage
scp /home/software/redis-3.2.11.tar.gz sysopt@10.119.169.11:/usr/redis
tar -zxvf redis-3.2.11.tar.gz
cd redis-3.2.11

rpm -q gcc
yum -y install gcc
make MALLOC=libc

cd /usr/local
mkdir -p /usr/local/redis/bin    
mkdir -p /usr/local/redis/etc
mdkir -p /usr/local/redis/data

chmod 757 /usr/local/redis/data
cd /usr/redis/redis-3.2.11
mv ./redis.conf /usr/local/redis/etc
cd src
mv mkreleasehdr.sh redis-benchmark redis-check-aof redis-check-dump redis-cli redis-server redis-sentinel /usr/local/redis/bin

cd /usr/local/redis/bin
./redis-server /usr/local/redis/etc/redis.conf    为redis-server指定配置文件

redis-cli -a kpmg123



git:
wget http://kernel.org/pub/software/scm/git/git-2.9.5.tar.gz
scp /home/software/git-2.9.5.tar.gz sysopt@10.119.169.11:/usr/git
tar -xzvf git-2.9.5.tar.gz
./configure --prefix=/usr/local
yum install zlib-devel 
yum install perl-ExtUtils-MakeMaker
make
sudo make install
git --version
mkdir -p /usr/local/git/CreditReview

# git config --global user.name "shanamos"
# git config --global user.email "amos.shan@kpmg.com"

#export PATH=$PATH:/usr/local/bin
cd CreditReview
sudo /usr/local/bin/git init
ls -a

#####创建用户运行git服务
adduser git
passwd git
chown git:git -R /home/www/project.git
chown git:git -R /home/git/.ssh

su git//切换到git用户
mkdir -p /home/git/.ssh
cd .ssh       //打开公钥文件夹
touch authorized_keys   //创建公钥文件 
vim authorized_keys     //将刚才复制的那一串公钥粘贴进去id_rsa.pub中的内容
chmod 700 .ssh
cd .ssh
chmod 600 authorized_keys

本地git客户端创建身份标识好让服务器知道是你推送过来
$ ssh-keygen -t rsa     //生成key证书公钥私钥 一路回车就ok了  
$ cat  .ssh/id_rsa.pub  //打开公钥 

切换root用户
打开文件/etc/ssh/sshd_config  
RSAAuthentication yes            #开启RSA认证功能  
PubkeyAuthentication yes      #开启公匙认证  
StricModes no                          #据说不改会强制要求登录用户和文件拥有者用户相同


git clone --bare git://192.168.10.XX/git_repo/project_name.git //从原地址克隆一份裸版本库，比如原本托管于 GitHub，或者是本地的私有仓库(本地客户端操作即可)
su - git
cd /path/to/path/
mkdir new_project_name.git
git init --bare new_project_name.git  //然后到新的 Git 服务器上创建一个新项目

cd project_name.git
git push --mirror git@192.168.20.XX:/path/to/path/new_project_name.git //以镜像推送的方式上传代码到 GitCafe 服务器上。请确保已经添加了公钥到新的机器上
 
编辑 .git中的config 找到 remote 中的 url
[remote "origin"]
    url = git@serverA:/project.git
    fetch = +refs/heads/*:refs/remotes/origin/*
修改为
[remote "origin"]
    url = git@serverB:/project.git
    fetch = +refs/heads/*:refs/remotes/origin/*
